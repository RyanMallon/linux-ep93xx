Kernel driver ds1621
====================

Supported chips:
  * Dallas Semiconductor & Maxim Integrated DS1621
    Prefix: 'ds1621'
    Addresses scanned: I2C 0x48 - 0x4f
    Datasheet: Publicly available from www.maximintegrated.com

  * Dallas Semiconductor DS1625
    Prefix:
     'ds1621' - if binding via _detect function
     'ds1625' - explicit instantiation
    Addresses scanned: I2C 0x48 - 0x4f
    Datasheet: Publicly available from www.datasheetarchive.com

  * Maxim Integrated DS1631
    Prefix: 'ds1631'
    Addresses scanned: I2C 0x48 - 0x4f
    Datasheet: Publicly available from www.maximintegrated.com

  * Maxim Integrated DS1721
    Prefix: 'ds1721'
    Addresses scanned: I2C 0x48 - 0x4f
    Datasheet: Publicly available from www.maximintegrated.com

Authors:
        Christian W. Zuckschwerdt <zany@triq.net>
        valuable contributions by Jan M. Sendler <sendler@sendler.de>
        ported to 2.6 by Aurelien Jarno <aurelien@aurel32.net>
        with the help of Jean Delvare <khali@linux-fr.org>

Module Parameters
------------------

* polarity int
  Output's polarity: 0 = active high, 1 = active low

Description
-----------

The DS1621 is a (one instance) digital thermometer and thermostat. It has
both high and low temperature limits which can be user defined (i.e.
programmed into non-volatile on-chip registers). Temperature range is -55
degree Celsius to +125 in 0.5 increments. You may convert this into a
Fahrenheit range of -67 to +257 degrees with 0.9 steps. If polarity
parameter is not provided, original value is used.

As for the thermostat, behavior can also be programmed using the polarity
toggle. On the one hand ("heater"), the thermostat output of the chip,
Tout, will trigger when the low limit temperature is met or underrun and
stays high until the high limit is met or exceeded. On the other hand
("cooler"), vice versa. That way "heater" equals "active low", whereas
"conditioner" equals "active high". Please note that the DS1621 data sheet
is somewhat misleading in this point since setting the polarity bit does
not simply invert Tout.

A second thing is that, during extensive testing, Tout showed a tolerance
of up to +/- 0.5 degrees even when compared against precise temperature
readings. Be sure to have a high vs. low temperature limit gap of al least
1.0 degree Celsius to avoid Tout "bouncing", though!

The alarm bits are set when the high or low limits are met or exceeded and
are reset by the module as soon as the respective temperature ranges are
left.

The alarm registers are in no way suitable to find out about the actual
status of Tout. They will only tell you about its history, whether or not
any of the limits have ever been met or exceeded since last power-up or
reset. Be aware: When testing, it showed that the status of Tout can change
with neither of the alarms set.

Temperature conversion of the DS1621 takes up to 1000ms; internal access to
non-volatile registers may last for 10ms or below.

The DS1625 is pin compatible and functionally equivalent with the DS1621,
but the DS1621 is meant to replace it. The DS1631 and DS1721 are also
pin compatible with the DS1621, but provide multi-resolution support.

Since there is no version register, there is no unique identification
for these devices. In addition, the DS1631 and DS1721 will emulate a
DS1621 device, if not explicitly instantiated (why? because the detect
function compares the temperature register values bits and checks for a
9-bit resolution). Therefore, for correct device identification and
functionality, explicit device instantiation is required.

The DS1721 is pin compatible with the DS1621, has an accuracy of +/- 1.0
degree Celius over a -10 to +85 degree range, a minimum/maximum alarm
default setting of 75 and 80 degrees respectifully, and a maximum conversion
time of 750ms.

In addition, the DS1721 supports four resolution settings from 9 to 12 bits
(defined in degrees C per LSB: 0.5, 0.25, 0.125, and 0.0625, respectifully),
that are set at device power on to the highest resolution: 12-bits.

One additional note about the ds1721 is that although the data sheet says
the temperature flags (THF and TLF) are used internally, these flags do
get set and cleared as the actual temperature crosses the min or max settings.

The DS1631 is also pin compatible with the DS1621 and feature compatible with
the DS1721, however the DS1631 accuracy is +/- 0.5 degree Celius over the
same range.

Changing the DS1631/1721 resolution mode affects the conversion time and can be
done from userspace, via the device 'update_interval' sysfs attribute. This
attribute will normalize range of input values to the device maximum resolution
values defined in the datasheet as such:

Resolution    Conversion Time    Input Range
 (C/LSB)       (msec)             (msec)
--------------------------------------------
0.5             93.75              0....94
0.25            187.5              95...187
0.125           375                188..375
0.0625          750                376..infinity
--------------------------------------

The following examples show how the 'update_interval' attribute can be
used to change the conversion time:

$ cat update_interval
750
$ cat temp1_input
22062
$
$ echo 300 > update_interval
$ cat update_interval
375
$ cat temp1_input
22125
$
$ echo 150 > update_interval
$ cat update_interval
188
$ cat temp1_input
22250
$
$ echo 1 > update_interval
$ cat update_interval
94
$ cat temp1_input
22000
$
$ echo 1000 > update_interval
$ cat update_interval
750
$ cat temp1_input
22062
$

As shown, the ds1621 driver automatically adjusts the 'update_interval'
user input, via a step function. Reading back the 'update_interval' value
after a write operation provides the conversion time used by the device.

Mathematically, the resolution can be derived from the conversion time
via the following function:

   g(x) = 0.5 * [minimum_conversion_time/x]

where:
 -> 'x' = the output from 'update_interval'
 -> 'g(x)' = the resolution in degrees C per LSB.
 -> 93.75ms = minimum conversion time
